{"version":3,"sources":["serviceWorker.js","components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundry.js","containers/App.js","index.js"],"names":["Boolean","window","location","hostname","match","Card","props","name","email","id","className","src","alt","CardList","robots","cardArray","map","user","index","key","searchBox","searchfield","searchChange","type","placeholder","onChange","Scroll","style","overflowY","border","height","children","ErrorBoundry","state","hasError","error","info","this","setState","hasRrror","Component","App","onSearchChange","event","target","value","fetch","then","response","json","users","filterRobot","filter","robot","toLowerCase","includes","length","SearchBox","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","message"],"mappings":"4MAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,gCCHSC,EAbF,SAACC,GAAW,IAChBC,EAAoBD,EAApBC,KAAMC,EAAcF,EAAdE,MAAOC,EAAOH,EAAPG,GACrB,OACC,yBAAKC,UAAU,uDACd,yBAAKC,IAAG,+BAA0BF,EAA1B,YAAwCG,IAAI,WACpD,6BACC,4BAAKL,GACL,2BAAIC,MCEOK,EARE,SAACP,GAAW,IACpBQ,EAAWR,EAAXQ,OACJC,EAAYD,EAAOE,KAAI,SAACC,EAAMC,GACjC,OAAO,kBAAC,EAAD,CAAMC,IAAKD,EAAOT,GAAIK,EAAOI,GAAOT,GAAIF,KAAMO,EAAOI,GAAOX,KAAMC,MAAOM,EAAOI,GAAOV,WAE/F,OAAO,6BAAMO,ICOCK,EAbG,SAAC,GAAkC,EAAhCC,YAAiC,IAApBC,EAAmB,EAAnBA,aACjC,OACC,yBAAKZ,UAAU,OACd,2BACCA,UAAU,mCACVa,KAAK,SACLC,YAAY,gBACZC,SAAUH,MCHCI,EAJA,SAACpB,GACf,OAAO,yBAAKqB,MAAO,CAAEC,UAAW,SAAUC,OAAQ,kBAAmBC,OAAQ,WAAaxB,EAAMyB,WC6BlFC,E,kDA5BX,WAAa1B,GACZ,IAAD,8BACI,cAAOA,IACF2B,MAAQ,CACTC,UAAU,GAHlB,E,8DASoBC,EAAOC,GAEvBC,KAAKC,SACD,CACIC,UAAU,M,+BAMlB,OAAKF,KAAKJ,MAAMC,SACL,yDAGJG,KAAK/B,MAAMyB,a,GA1BCS,aCqDZC,G,wDA7Cd,aACC,IAAD,8BACC,gBAcDC,eAAiB,SAAEC,GAElB,EAAKL,SAAU,CAAEjB,YAAasB,EAAMC,OAAOC,SAf3C,EAAKZ,MAAQ,CACZnB,OAAQ,GACRO,YAAa,IAJf,E,gEASC,IAAD,OACCyB,MAAO,8CACLC,MAAM,SAAEC,GAAF,OAAgBA,EAASC,UAC/BF,MAAM,SAAEG,GAAF,OAAa,EAAKZ,SAAU,CAAExB,OAAQoC,S,+BAS9C,IAAD,EACiCb,KAAKJ,MAA7BnB,EADT,EACSA,OAAQO,EADjB,EACiBA,YACV8B,EAAcrC,EAAOsC,QAAQ,SAAEC,GAEpC,OAAOA,EAAM9C,KAAK+C,cAAcC,SAAUlC,EAAYiC,kBAGvD,OAAQxC,EAAO0C,OAGb,yBAAK9C,UAAU,MACd,wBAAIA,UAAU,MAAd,oBACA,kBAAC+C,EAAD,CAAWnC,aAAee,KAAKK,iBAC/B,kBAAC,EAAD,KACC,kBAAC,EAAD,KACC,kBAAC,EAAD,CAAU5B,OAASqC,OAPvB,8C,GAhCeX,cCAlBkB,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SP2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBjB,MAAK,SAAAkB,GACJA,EAAaC,gBAEdC,OAAM,SAAAhC,GACLiC,QAAQjC,MAAMA,EAAMkC,a","file":"static/js/main.763f93e3.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\n\r\nconst Card = (props) => {\r\n\tconst { name, email, id } = props;\r\n\treturn (\r\n\t\t<div className='tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\r\n\t\t\t<img src={`https://robohash.org/${id}?180x180`} alt='robots' />\r\n\t\t\t<div>\r\n\t\t\t\t<h2>{name}</h2>\r\n\t\t\t\t<p>{email}</p>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default Card;\r\n","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst CardList = (props) => {\r\n\tconst { robots } = props;\r\n\tlet cardArray = robots.map((user, index) => {\r\n\t\treturn <Card key={index} id={robots[index].id} name={robots[index].name} email={robots[index].email} />;\r\n\t});\r\n\treturn <div>{cardArray}</div>;\r\n};\r\n\r\nexport default CardList;\r\n","import React from 'react';\r\n\r\nconst searchBox = ({ searchfield, searchChange }) => {\r\n\treturn (\r\n\t\t<div className='pa2'>\r\n\t\t\t<input\r\n\t\t\t\tclassName='pa3 ba b--green bg-lightest-blue'\r\n\t\t\t\ttype='search'\r\n\t\t\t\tplaceholder='search robots'\r\n\t\t\t\tonChange={searchChange}\r\n\t\t\t/>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default searchBox;\r\n","import React from 'react';\r\n\r\nconst Scroll = (props) => {\r\n\treturn <div style={{ overflowY: 'scroll', border: '1px solid black', height: '1000px' }}>{props.children}</div>;\r\n};\r\n\r\nexport default Scroll;\r\n","import React, { Component } from 'react';\r\n\r\nclass ErrorBoundry extends Component\r\n{\r\n    constructor( props )\r\n    {\r\n        super( props );\r\n        this.state = {\r\n            hasError: false\r\n        };\r\n    }\r\n\r\n\r\n    // like the component try... and... catch block in JS\r\n    componentDidCatch ( error, info )\r\n    {\r\n        this.setState(\r\n            {\r\n                hasRrror: true\r\n            } );\r\n    }\r\n\r\n    render ()\r\n    {\r\n        if ( this.state.hasError ) {\r\n            return <h1>Ooops... That is not good</h1>;\r\n        }\r\n\r\n        return this.props.children;\r\n    }\r\n}\r\n\r\nexport default ErrorBoundry;","import React, { Component } from 'react';\r\nimport CardList from '../components/CardList';\r\nimport SearchBox from '../components/SearchBox';\r\nimport Scroll from '../components/Scroll';\r\nimport ErrorBoundry from '../components/ErrorBoundry';\r\n\r\nimport './App.css';\r\n\r\nclass App extends Component\r\n{\r\n\tconstructor()\r\n\t{\r\n\t\tsuper();\r\n\t\tthis.state = {\r\n\t\t\trobots: [],\r\n\t\t\tsearchfield: ''\r\n\t\t};\r\n\t}\r\n\r\n\tcomponentDidMount ()\r\n\t{\r\n\t\tfetch( 'https://jsonplaceholder.typicode.com/users' )\r\n\t\t\t.then( ( response ) => response.json() )\r\n\t\t\t.then( ( users ) => this.setState( { robots: users } ) );\r\n\t}\r\n\r\n\tonSearchChange = ( event ) =>\r\n\t{\r\n\t\tthis.setState( { searchfield: event.target.value } );\r\n\t};\r\n\r\n\trender ()\r\n\t{\r\n\t\tconst { robots, searchfield } = this.state;\r\n\t\tconst filterRobot = robots.filter( ( robot ) =>\r\n\t\t{\r\n\t\t\treturn robot.name.toLowerCase().includes( searchfield.toLowerCase() );\r\n\t\t} );\r\n\r\n\t\treturn !robots.length ? (\r\n\t\t\t<h1>Loading...</h1>\r\n\t\t) : (\r\n\t\t\t\t<div className='tc'>\r\n\t\t\t\t\t<h1 className='f1'>Our RobotFriends</h1>\r\n\t\t\t\t\t<SearchBox searchChange={ this.onSearchChange } />\r\n\t\t\t\t\t<Scroll>\r\n\t\t\t\t\t\t<ErrorBoundry>\r\n\t\t\t\t\t\t\t<CardList robots={ filterRobot } />\r\n\t\t\t\t\t\t</ErrorBoundry>\r\n\t\t\t\t\t</Scroll>\r\n\t\t\t\t</div>\r\n\t\t\t);\r\n\t}\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'tachyons';\nimport * as serviceWorker from './serviceWorker';\n\nimport App from './containers/App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}